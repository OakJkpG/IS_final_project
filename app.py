# app.py
import streamlit as st
import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.cluster import KMeans
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import img_to_array, load_img

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ layout ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(page_title="ML/NN Project", layout="wide")

# ----- Custom CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö -----
st.markdown(
    """
    <style>
    body {
        background-color: #f8f9fa;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    .stButton>button {
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 8px;
        padding: 8px 16px;
        font-size: 16px;
    }
    .css-1outpf7 {
        background-color: #ffffff;
        border-bottom: 2px solid #dee2e6;
    }
    </style>
    """, unsafe_allow_html=True
)

# ----- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CSV -----
@st.cache_data
def load_data(file_path):
    return pd.read_csv(file_path)

# ----- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Health Data -----
def prepare_health_dataset(df):
    df['BMI'] = df['BMI'].fillna(df['BMI'].mean())
    df['BloodPressure'] = df['BloodPressure'].fillna(df['BloodPressure'].mean())
    df['HeartRate'] = df['HeartRate'].fillna(df['HeartRate'].mean())
    return df

# ----- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Financial Data -----
def prepare_financial_dataset(df):
    df['StockPrice'] = df['StockPrice'].fillna(df['StockPrice'].mean())
    df['Income'] = df['Income'].fillna(df['Income'].mean())
    df['Expense'] = df['Expense'].fillna(df['Expense'].mean())
    return df

# ----- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• CNN (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Synthetic Digit Images) -----
@st.cache_resource
def load_cnn_model():
    model_path = "models/digit_count_cnn.h5"
    if os.path.exists(model_path):
        return load_model(model_path)
    return None

# ----- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÇ‡∏´‡∏•‡∏î label ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Synthetic Digit Images -----
@st.cache_data
def load_labels():
    labels_path = os.path.join("data/digits", "labels.csv")
    return pd.read_csv(labels_path)

# ----- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ó‡πá‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Navigation -----
tabs = st.tabs([
    "üè† Home", 
    "üìò ML Explanation", 
    "üìô NN Explanation", 
    "ü§ñ ML Model Demo", 
    "üß† Demo CNN"
])

# ==========================================================
# Tab 1: Overview
# ==========================================================
with tabs[0]:
    st.title("üîç Overview ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ")
    st.markdown("""
    **‡∏ó‡∏µ‡πà‡∏°‡∏≤:**  
    - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ **ChatGPT**

    **Dataset 1: Health Data (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û)**  
    - **Features:**  
      - **ID:** ‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°  
      - **BMI:** ‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏°‡∏ß‡∏•‡∏Å‡∏≤‡∏¢ (numeric)  
      - **BloodPressure:** ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï (numeric)  
      - **HeartRate:** ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏±‡∏ß‡πÉ‡∏à (numeric)  
      - **Risk:** ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û (Categorical: "Low", "Medium", "High")  
    - **‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå:**  
      - ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå BMI, BloodPressure ‡πÅ‡∏•‡∏∞ HeartRate ‡∏°‡∏µ missing values ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 10%
    - **ML Approach:** 
      - ‡πÉ‡∏ä‡πâ Decision Tree Classification ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á

    **Dataset 2: Financial Data (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô)**  
    - **Features:**  
      - **ID:** ‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•  
      - **StockPrice:** ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô (numeric)  
      - **Income:** ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö (numeric)  
      - **Expense:** ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ (numeric)  
      - **NetProfit:** ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥ (Target ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Regression) ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å Income - Expense ‡∏û‡∏£‡πâ‡∏≠‡∏° noise ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢  
    - **‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå:**  
      - ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå StockPrice, Income ‡πÅ‡∏•‡∏∞ Expense ‡∏°‡∏µ missing values ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 10%
    - **ML Approach:** 
      - ‡πÉ‡∏ä‡πâ K-Means Clustering ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô
      
    **Dataset 3: Synthetic Digit Images (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏™‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå)**  
    - **Features:**  
      - ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏ô‡∏≤‡∏î 64x64 ‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏• ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å MNIST ‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°  
      - ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏†‡∏≤‡∏û‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 3-7 ‡∏ï‡∏±‡∏ß 
      - ‡∏™‡∏£‡πâ‡∏≤‡∏á label vector ‡∏Ç‡∏ô‡∏≤‡∏î 10 ‡∏Ñ‡πà‡∏≤ ‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 0-9    
    - **‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå:**  
      - ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏†‡∏≤‡∏û‡∏ñ‡∏π‡∏Å‡∏ß‡∏≤‡∏á‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏£‡∏õ‡∏£‡∏ß‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
    - **DL Approach:** 
      - ‡πÉ‡∏ä‡πâ Convolutional Neural Network (CNN) ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    """)
    
# ==========================================================
# Tab 2: Machine Learning Explanation (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Health & Financial Data)
# ==========================================================
with tabs[1]:
    st.title("üìò Machine Learning Explanation")
    st.subheader("1. Health Data (Decision Tree Classification)")
    st.markdown("""
    **‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:**  
    - ‡πÄ‡∏ï‡∏¥‡∏° missing values ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö BMI, BloodPressure, ‡πÅ‡∏•‡∏∞ HeartRate

    **‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏° Decision Tree:**  
    - ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á (Risk)  
    - ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à   

    **‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤:**  
    1. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏° missing values  
    2. ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• (Train/Test Split)  
    3. ‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• Decision Tree ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á hyperparameters  
    4. ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    """)
    st.subheader("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Health Data")
    df_health = load_data("data/health_dataset.csv")
    st.dataframe(df_health.head(10))

    st.subheader("2. Financial Data (K-Means Clustering)")
    st.markdown("""
    **‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:**  
    - ‡πÄ‡∏ï‡∏¥‡∏° missing values ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö StockPrice, Income, ‡πÅ‡∏•‡∏∞ Expense

    **‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏° K-Means Clustering:**  
    - ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô (Unsupervised Learning)  
    - ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

    **‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤:**  
    1. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏° missing values  
    2. ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• (K-Means)  
    3. ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á hyperparameters (‡πÄ‡∏ä‡πà‡∏ô ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏•‡∏±‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå)  
    4. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°
    """)
    st.subheader("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Financial Data")
    df_financial = load_data("data/financial_dataset.csv")
    st.dataframe(df_financial.head(10))

# ==========================================================
# Tab 3: Neural Network Explanation (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Financial Data)
# ==========================================================
with tabs[2]:
    st.title("üìô Neural Network Explanation: Synthetic Digit Images")
    st.markdown("""
    **Synthetic Digit Images:**  
    - ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏ô‡∏≤‡∏î 64x64 ‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏• ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å MNIST ‡∏ñ‡∏π‡∏Å‡∏ß‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏° (3-7 ‡∏ï‡∏±‡∏ß‡∏ï‡πà‡∏≠‡∏†‡∏≤‡∏û)  
    - **Label:** ‡πÄ‡∏ß‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå 10 ‡∏Ñ‡πà‡∏≤ ‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß (0-9)
    
    **‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:**
    - ‡∏™‡∏£‡πâ‡∏≤‡∏á synthetic image ‡πÇ‡∏î‡∏¢‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å MNIST  
    - ‡∏ß‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏•‡∏á‡∏ö‡∏ô canvas ‡∏Ç‡∏ô‡∏≤‡∏î 64x64 ‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏• ‡πÇ‡∏î‡∏¢‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (3-7 ‡∏ï‡∏±‡∏ß)  
    - ‡∏™‡∏£‡πâ‡∏≤‡∏á label vector ‡∏Ç‡∏ô‡∏≤‡∏î 10 ‡∏Ñ‡πà‡∏≤ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
    
    **‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏° Convolutional Neural Network (CNN):**
    - ‡πÉ‡∏ä‡πâ‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏° CNN ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Convolutional Layers, MaxPooling Layers, ‡πÅ‡∏•‡∏∞ Dense Layers  
    - ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ label vector ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô‡∏†‡∏≤‡∏û

    **‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤:**
    1. ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞ label ‡∏à‡∏≤‡∏Å synthetic dataset  
    2. ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏° CNN ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î hyperparameters  
    3. ‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ training set ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á model ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û  
    4. ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏î‡πâ‡∏ß‡∏¢ test set ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    """)
    st.subheader("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Label (CSV) ‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏û‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Label")
    df_labels = load_labels()
    st.dataframe(df_labels.head(10))

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 5 ‡∏£‡∏π‡∏õ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• label
    num_examples = 5
    for index, row in df_labels.head(num_examples).iterrows():
        st.markdown(f"**Filename:** {row['filename']} | **Label:** {row['label']}")
        image_path = os.path.join("data/digits/images", row["filename"])
        st.image(image_path, caption=row["filename"], width=150)
        
# ==========================================================
# Tab 4: Demo Machine Learning Model
# ==========================================================
with tabs[3]:
    st.title("ü§ñ Demo ML Model")
    st.markdown("## ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1: Decision Tree Classification (Health Data)")
    with st.form("form_dt"):
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("**‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Decision Tree**")
            dt_max_depth = st.slider("Max Depth", min_value=1, max_value=20, value=5, step=1)
            dt_min_samples_split = st.slider("Min Samples Split", min_value=2, max_value=20, value=2, step=1)
        with col2:
            st.markdown("**‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤ Feature ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢**")
            input_bmi = st.number_input("BMI", value=25.0, key="dt_bmi_input")
            input_bp = st.number_input("BloodPressure", value=120.0, key="dt_bp_input")
            input_hr = st.number_input("HeartRate", value=75.0, key="dt_hr_input")
        submitted_dt = st.form_submit_button("‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ Decision Tree")
    
    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Health Data
    df_health_demo = load_data("data/health_dataset.csv")
    df_health_demo = prepare_health_dataset(df_health_demo)
    # ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ target Risk
    le_risk = LabelEncoder()
    df_health_demo['Risk_enc'] = le_risk.fit_transform(df_health_demo['Risk'])
    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° features ‡πÅ‡∏•‡∏∞ target ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•
    X_health = df_health_demo[['BMI', 'BloodPressure', 'HeartRate']]
    y_health = df_health_demo['Risk_enc']
    X_train, X_test, y_train, y_test = train_test_split(X_health, y_health, test_size=0.2, random_state=42)
    dt_model = DecisionTreeClassifier(max_depth=dt_max_depth, min_samples_split=dt_min_samples_split, random_state=42)
    dt_model.fit(X_train, y_train)
    
    if submitted_dt:
        input_features = np.array([[input_bmi, input_bp, input_hr]])
        prediction = dt_model.predict(input_features)
        predicted_risk = le_risk.inverse_transform(prediction)[0]
        st.success(f"‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á (Decision Tree): {predicted_risk}")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
        fig_tree, ax_tree = plt.subplots(figsize=(12,8))
        plot_tree(dt_model, filled=True, feature_names=['BMI', 'BloodPressure', 'HeartRate'], class_names=le_risk.classes_)
        st.pyplot(fig_tree)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå
        importances = dt_model.feature_importances_
        fig_imp, ax_imp = plt.subplots(figsize=(8,6))
        ax_imp.bar(['BMI', 'BloodPressure', 'HeartRate'], importances, color='skyblue')
        ax_imp.set_title("Feature Importances in Decision Tree")
        st.pyplot(fig_imp)
    
    st.markdown("---")
    st.markdown("## ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: K-Means Clustering (Financial Data)")
    n_clusters = st.slider("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏•‡∏±‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå", min_value=2, max_value=10, value=3, step=1, key="km_clusters")
    if st.button("‡∏£‡∏±‡∏ô K-Means", key="btn_km"):
        df_financial_demo = load_data("data/financial_dataset.csv")
        df_financial_demo = prepare_financial_dataset(df_financial_demo)
        X_financial = df_financial_demo[['StockPrice', 'Income', 'Expense']]
        kmeans_model = KMeans(n_clusters=n_clusters, random_state=42)
        clusters = kmeans_model.fit_predict(X_financial)
        df_financial_demo['Cluster'] = clusters
        st.success(f"K-Means ‡πÅ‡∏ö‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô {n_clusters} ‡∏Ñ‡∏•‡∏±‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß")
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö visualization ‡πÉ‡∏ä‡πâ Income ‡∏Å‡∏±‡∏ö Expense ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        fig_km, ax_km = plt.subplots(figsize=(8,6))
        sns.scatterplot(x='Income', y='Expense', hue='Cluster', data=df_financial_demo, palette='viridis', ax=ax_km)
        ax_km.set_title("K-Means Clustering of Financial Data (Income vs Expense)")
        st.pyplot(fig_km)

# ==========================================================
# Tab 5: Demo NN(CNN) Model for Digit Counting (Synthetic Digit Images)
# ==========================================================
with tabs[4]:
    st.title("üß† Demo NN Model")
    
    # ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å Synthetic Digit Images
    df_labels = load_labels()
    image_options = df_labels["filename"].tolist()
    selected_image = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏†‡∏≤‡∏û", image_options)
    
    image_path = os.path.join("data/digits/images", selected_image)
    img = load_img(image_path, color_mode="grayscale", target_size=(64,64))
    img_array = img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)
    
    st.image(image_path, caption=f"‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {selected_image}", use_container_width=False)
    
    # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• CNN ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö synthetic digit counting
    cnn_model = load_cnn_model()
    if cnn_model is None:
        st.error("‡πÇ‡∏°‡πÄ‡∏î‡∏• CNN ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Å‡πà‡∏≠‡∏ô")
    else:
        if st.button("‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô‡∏†‡∏≤‡∏û", key="btn_cnn"):
            prediction = cnn_model.predict(img_array)[0]
            st.success(f"‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå: {np.round(prediction, 2)}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
            fig, ax = plt.subplots(figsize=(10,6))
            ax.bar(range(10), prediction, color='skyblue')
            ax.set_xlabel("Number (0-9)")
            ax.set_ylabel("Prediction value")
            ax.set_title("Predicting the number of digits in an image")
            st.pyplot(fig)
